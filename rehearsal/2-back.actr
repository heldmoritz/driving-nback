(set-task "actr.tasks.driving.Driving")

(sgp
    :iu 10
    :bll 0.5
    :digit-detect-delay .050
    :digit-recode-delay .250
    :visual-onset-span 500.0
    :visual-finst-span 3.0
    :emma t
    :v t
    ;---
    :rt -100
    :ans 0.5
    :mp 24
    :lf 0.3
    ;---
    ;:act t
    :brain-imaging nil
    ;:bout t
    :qs 1.0)

(add-dm
    (goal1 isa nback status start)
    (goal2 isa drive follow far sl 2 nbackspeed 60 lookSpeedometer 25)
)
(set-all-base-levels 10000)

(p start
        ;;create an empty imaginal chunk
    =goal>
        isa nback
        status start
    ?imaginal>
        state free
==>
    =goal>
        status notice
        num 0
        nr 0
        rehearsal f
        nbackspeed 60
        lastSign 0
    +imaginal>
        isa nback-state
        id 0   
        1back nil
        slimit 60
        recalled 0  
    +temporal>
        isa time
        ticks clear
    -imaginal>
)

;----------------- DRIVING -----------------

(p drive*attend-near
    =goal>
        isa drive
        na nil
        - follow undecided
    ?visual-location> 
        ;state free
        buffer empty
        - buffer requested
    ?imaginal>
        state free
    ?visual>
        state free
        buffer empty
==>
    =goal>
        isa drive
        safe nil
    +visual-location>
        isa visual-location
        kind near
)

(p attend-speedometer
    =goal>
        isa drive
        lookSpeedometer =ticks
    =temporal>
        isa time
        > ticks =ticks
    ?visual-location>
        state free
        buffer empty
    =visual-location>
        - kind speedsign
        - kind speedometer
==>
    =goal>
        isa drive
    +visual-location>
        isa visual-location
        kind speedometer
    +temporal>
        isa time
        ticks clear
)

(p process-speedometer
    =goal>
        isa drive
    ?visual>
        state free
        buffer empty
    =visual-location>
        isa visual-location
        kind speedometer
==>
    =goal>
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location>
)

(p update-representation-speed
    =goal>
        isa drive
        nbackspeed =nbackspeed
    =visual-location>
    =visual>
        isa speedometer
        value =speed
==>
    !bind! =ticks (calculate-ticks =speed =nbackspeed)
    !eval! (update-speed =nbackspeed)
    !eval! (keep-limit =nbackspeed)
    =goal>
        isa drive
        lookSpeedometer =ticks
    -visual-location>
)

(p drive*eval-safety-safe
    =goal>
        isa drive
        safe nil
        - follow undecided
        ;- na nil
        ;- na2 nil
        nbackspeed =nbackspeed
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
    !eval! (safe-zone)
==>
    !eval! (keep-limit =nbackspeed)
    =goal>
        isa drive
        safe t
        ;-visual-location>
)

(p drive*eval-safety-unsafe*
    =goal>
        isa drive
        - follow undecided
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
    !eval! (not-safe-zone)
    !eval! (do-reset)
==>
    =goal>
        isa control
        safe f
        na nil
        fa nil
        na2 nil
        fa2 nil
        fkind2 nil
        time2 nil    
    =visual-location>
)

(p drive*eval-safety-unsafe
    =goal>
        isa drive
        - follow undecided
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
    !eval! (not-safe-zone)
    !eval! (do-not-reset)
==>
    =goal>
        isa control
        safe f
    =visual-location>
)

(p drive*process-near-attend-far
    =goal>
        isa control
        na nil
        follow far
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
==>
    !bind! =na (image->angle =nx =nd)
    =goal>
        isa control
        na =na
    +visual-location>
        isa visual-location
        kind far
)

(p drive*process-near-attend-car
    =goal>
        isa control
        na nil
        follow car
        safe f
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
==>
    !bind! =na (image->angle =nx =nd)
    =goal>
        isa control
        na =na
    +visual-location>
        isa visual-location
        kind car
)

(p drive*process-far
    =goal>
        isa control
        na =na
        fa nil
        na2    =na2
        fa2    =fa2
        fkind2 =fkind
        fthw2  =fthw2
        time2  =time2
        nbackspeed =nbackspeed
    =visual-location>
        isa visual-location
        kind far 
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
    !bind! =fa (image->angle =fx =fd)
    !bind! =time (mp-time)
    !bind! =dna (- =na =na2)
    !bind! =dfa (- =fa =fa2)
    !bind! =dt (- =time =time2)
    !bind! =vna (my/ =dna =dt)
    !bind! =vfa (my/ =dfa =dt)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =dthw (- =fthw =fthw2)
    !eval! (do-steer =na =dna =dfa =dt)
    !eval! (keep-limit =nbackspeed)
    =goal>
        fkind =fkind
        fa =fa
        fd =fd
        vna =vna
        vfa =vfa
        time =time
        fthw =fthw
        dthw =dthw
        v =v
        done t
    +visual>
        isa move-attention
        screen-pos =visual-location
)

(p drive*process-car
    =goal>
        isa control
        na =na
        fa nil
        na2    =na2
        fa2    =fa2
        fkind2 =fkind
        fthw2  =fthw2
        time2  =time2
        nbackspeed =nbackspeed
    =visual-location>
        isa visual-location
        kind car 
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
    !bind! =fa (image->angle =fx =fd)
    !bind! =time (mp-time)
    !bind! =dna (- =na =na2)
    !bind! =dfa (- =fa =fa2)
    !bind! =dt (- =time =time2)
    !bind! =vna (my/ =dna =dt)
    !bind! =vfa (my/ =dfa =dt)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =dthw (- =fthw =fthw2)
    !eval! (do-steer =na =dna =dfa =dt)
        ;!eval! (keep-lane =na =dna =dfa =dt)
    !eval! (keep-limit =nbackspeed)
    =goal>
        fkind =fkind
        fa =fa
        fd =fd
        vna =vna
        vfa =vfa
        time =time
        fthw =fthw
        dthw =dthw
        v =v
        done t
    +visual>
        isa move-attention
        screen-pos =visual-location
)

(p drive*process-without-old
    =goal>
        isa control
        na =na
        fa nil
    =visual-location>
        isa visual-location
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
    !bind! =fa (image->angle =fx =fd)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =time (mp-time)
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    +visual-location>
        isa visual-location
        kind near
)
(spp drive*process-without-old :u 7)

(p drive*loop-stable-far
    =goal>
        isa control
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
    =visual>
        isa far
    !eval! (is-car-stable =na =vna =vfa)
==>
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
    +visual-location>
        isa visual-location
        kind car
        >= screen-x 0 ;annoying...
)

(p drive*loop-monitor-car-left*
        ;first time
    =goal>
        isa drive
        follow far
        sl =sl
        na nil
        fa nil
        na2 =na
        fa2 =fa
        ;fd2 =fd
        fkind2 =fkind
        time2 =time
        cthw nil
        cthw2 nil
    =visual-location>
        isa visual-location
        kind car
        distance =fd
        >= screen-x 0
        screen-x =fx
    !eval! (autocar-left =sl =fd =fx)
==>
    !bind! =v (get-velocity)
    !bind! =cthw (get-thw =fd =v)
    !bind! =dcthw (- =cthw =cthw2)
    =goal>
        isa drive
        ctwh2 =cthw
        cthw =cthw
        dcthw =dcthw
        fd =fd
)

(p drive*loop-monitor-car-left
    =goal>
        isa drive
        follow far
        sl =sl
        na nil
        fa nil
        cthw =cthw2
        dcthw =dcthw2
    =visual-location>
        isa visual-location
        kind car
        distance =fd
        >= screen-x 0
        screen-x =fx
    !eval! (autocar-left =sl =fd =fx)
    !eval! (car-not-too-close =fd =cthw2 =dcthw2)   
==>
    !bind! =v (get-velocity)
    !bind! =cthw (get-thw =fd =v)
    !bind! =dcthw (- =cthw =cthw2)
    =goal>
        isa drive
        ctwh2 =cthw2
        cthw =cthw
        dcthw =dcthw
        fd =fd
    -visual-location>
)

(p drive*loop-monitor-car-right
    =goal>
        isa drive
        follow far
        sl =sl
        na nil
        fa nil
    =visual-location>
        isa visual-location
        kind car
        distance =fd
        >= screen-x 0
        screen-x =fx
    !eval! (autocar-not-ahead =sl =fd =fx)
    !eval! (autocar-right =sl =fd =fx)
==>
    =goal>
        isa drive
)

(p drive*notice-construction
    =goal>
        isa drive
        ;- construction t
    =visual-location>
        isa visual-location
        kind construction
        :attended nil
    ?visual>
        state free
        buffer empty
==>
    =goal>
        isa drive
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location>
)

(p drive*process-construction-start
    =goal>
        isa drive
    =visual>
        isa construction
        value start
==>
    =goal>
        isa drive
        construction t
    -visual-location>
)

(p drive*process-construction-end
    =goal>
        isa drive
    =visual>
        isa construction
        value end
==>
    =goal>
        isa drive
        construction nil
    -visual-location>
)

(p drive*loop-stable-car
    =goal>
        isa control
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
        fthw =fthw
        dthw =dthw
        follow car
        sl =sl
    =visual>
        isa car
        value =cl
    !eval! (is-car-stable =na =vna =vfa)
    !eval! (car-not-too-close =fd =fthw =dthw)
    !eval! (same-lane =sl =cl)
==>
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
)

(p drive*loop-stable-car-change-point
    =goal>
        isa control
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
        fthw =fthw
        dthw =dthw
        follow car
        sl =sl
    =visual>
        isa car
        value =cl
    !eval! (is-car-stable =na =vna =vfa)
    !eval! (car-not-too-close =fd =fthw =dthw)
    !eval! (not-same-lane =sl =cl)
==>
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
        follow far
)

(p drive*loop-stable-far-change-point
    =goal>
        isa drive
        follow far
        sl =sl
    =visual-location>
        isa visual-location
        kind car
        >= screen-x 0
        screen-x =fx
        distance =fd
    ?imaginal>
        state free
    !eval! (autocar-ahead =sl =fd =fx) ;peripheral vision
==>
    =goal>
        isa drive
        follow car
    +visual-location>
        isa visual-location
        kind near
)

(p drive*init-overtake-attend-left-mirror
    =goal>
        isa control
        follow car
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
        fd =fd
        fthw =fthw
        dthw =dthw
        sl =sl
        > sl 1
    =visual>
        isa car
        value =cl
    !eval! (car-too-close =fd =fthw =dthw)
    !eval! (dont-tailgate)
==>
    =goal>
        isa overtake
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
    +visual-location>
        isa visual-location
        kind left-mirror
)

(p drive*avoid-construction
    =goal>
        isa drive
        sl 1
        construction =t ; needs to exist
        construction t
    ?visual-location>
        state free
        buffer empty
==>
    =goal>
        isa drive
    +visual-location>
        isa visual-location>
        kind right-mirror
)

(p drive*tailgate
    =goal>
        isa control
        follow car
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
        fd =fd
        fthw =fthw
        dthw =dthw
        sl =sl
        sl 2
    =visual>
        isa car
        value =cl
    ?imaginal>
        state free
    !eval! (car-too-close =fd =fthw =dthw)
    !eval! (tailgate)
==>
    =goal>
        isa drive
        follow far
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
    +visual-location>
        isa visual-location
        kind near
    +temporal>
        isa time
        ticks clear
)

(p drive*init-overtake-attend-left-mirror-far
    =goal>
        isa drive
        follow far
        sl =sl
        > sl 1
        na nil
        fa nil
        na2 =na
        fa2 =fa
        ;fd2 =fd
        fkind2 =fkind
        time2 =time
        cthw =cthw2
        dcthw =dcthw2
    =visual-location>
        isa visual-location
        kind car
        distance =fd
        >= screen-x 0
        screen-x =fx
    !eval! (autocar-left =sl =fd =fx)
    !eval! (car-too-close =fd =cthw2 =dcthw2)   
==>
    =goal>
        isa overtake
    +visual-location>
        isa visual-location
        kind left-mirror
)

(p drive*loop-process-left-mirror
    =goal>
        isa overtake
    ?visual>
        buffer empty
        - state requested
    =visual-location>
        isa visual-location
        kind left-mirror
==>
    =goal>
        isa overtake
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location> ;sign won't be noticed
)

(p drive*loop-process-right-mirror
    =goal>
        isa drive
    ?visual>
        buffer empty
        - state requested
    =visual-location>
        isa visual-location
        kind right-mirror
    ?visual>
        buffer empty
        state free
==>
    =goal>
        isa overtake
        
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location> ;sign won't be noticed
)


(p drive*slow-down
    =goal>
        isa overtake
    =visual>
        isa =isa
        value =value
    !eval! (overtaking-not-safe =value)
    !eval! (merging)
==>
    !eval! (keep-limit 60)
    =goal>
        isa drive
        na nil
    +visual-location>
        isa visual-location
        kind right-mirror
)

(p drive*abort-changing-lane
    =goal>
        isa overtake
    =visual>
        isa =isa
        value =value
    ?imaginal>
        state free
    !eval! (overtaking-not-safe =value)
    !eval! (not-merging)
==>
    =goal>
        isa drive
        na nil
    +temporal>
        isa time
        time clear
    +visual-location>
        isa visual-location
        kind near
)

(p drive*attend-left-lane
    =goal>
        isa overtake
    =visual>
        isa left-mirror
        value clear
==>
    =goal>
        isa overtake
    +visual-location>
        isa visual-location
        kind left-lane
)

(p drive*attend-right-lane
    =goal>
        isa overtake
    =visual>
        isa right-mirror
        value clear
==>
    =goal>
        isa overtake
    +visual-location>
        isa visual-location
        kind right-lane        
)

(p drive*process-right-lane
    =goal>
        isa overtake
    ?visual>
        buffer empty
        - state requested
    =visual-location>
        isa visual-location
        kind right-lane
==>
    =goal>
        isa overtake
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location>
)

(p drive*process-left-lane
    =goal>
        isa overtake
    ?visual>
        buffer empty
        - state requested
    =visual-location>
        isa visual-location
        kind left-lane
==>
    =goal>
        isa overtake
    +visual>
        isa move-attention
        screen-pos =visual-location
    =visual-location>
)

(p drive*loop-turn-left
    =goal>
        isa overtake
        sl =sl
        > sl 1
    =visual>
        isa left-lane
        value clear
==>
    !eval! (change-lane-left)
    !bind! =sl (simcar-lane)
    =goal>
        isa drive
        follow undecided
        sl =sl
        na nil 
        na2 nil
        fa nil
        fa2 nil
    +temporal>
        isa time
        ticks clear
    +visual-location>
        isa visual-location
        kind car
)

(p drive*loop-turn-right
    =goal>
        isa overtake
        sl =sl
        < sl 3
    =visual>
        isa right-lane
        value clear
==>
    !eval! (change-lane-right)
    !bind! =sl (simcar-lane)
    =goal>
        isa drive
        sl =sl
        na nil 
        na2 nil
        fa nil
        fa2 nil
        cthw nil
        cthw2 nil
        dthw nil
        follow undecided
        ;+temporal>
        ;isa time
        ;ticks clear
    +visual-location>
        isa visual-location
        kind car
        >= screen-x 320 ;right-side of environment
)

(p drive*merge-at-construction
    =goal>
        isa overtake
        sl 1
        construction t
    =visual>
        isa right-lane
        value clear
    !eval! (merging)
==>
    !eval! (change-lane-right)
    !bind! =sl (simcar-lane)
    =goal>
        isa drive
        sl =sl
        cthw nil
        cthw2 nil
        dthw nil
        follow undecided
    +visual-location>
        isa visual-location
        kind car
        ;>= screen-x 320 ;right-side of environment
)

(p drive*follow-far
    =goal>
        isa drive
        - follow far
    ?visual-location>        
        state error
    ?imaginal>
        state free
==>
    =goal>
        isa drive
        follow far
        ;na nil
        ;fa nil
        ;na2 nil
        ;fa2 nil
        ;fkind2 nil
        ;time2 nil
    +visual-location>
        isa visual-location
        kind near
)

(p drive*follow-far2
    =goal>
        isa drive
        sl =sl
        follow undecided
    =visual>
        isa car
        value =cl
    ?imaginal>
        state free
    !eval! (not-same-lane =sl =cl)
==>
    =goal>
        isa drive
        follow far        
        ;na nil
        ;fa nil
        ;na2 nil
        ;fa2 nil
        ;fkind2 nil
        ;time2 nil
    +visual-location>
        isa visual-location
        kind near
)

(p drive*follow-far3
    =goal>
        isa control
        - follow far
    ?visual-location>        
        state error
    ?imaginal>
        state free
==>
    =goal>
        isa drive
        follow far
        ;na nil
        ;fa nil
        ;na2 nil
        ;fa2 nil
        ;fkind2 nil
        ;time2 nil
    +visual-location>
        isa visual-location
        kind near
)

(p drive*decide-follow
    =goal>
        isa drive
        follow undecided
    =visual-location>
        isa visual-location
        kind car
==>
    !bind! =sl (simcar-lane)
    =goal>
        isa drive
        sl =sl
    +visual>
        isa move-attention
        screen-pos =visual-location
)

(p drive*follow-car
    =goal>
        isa drive
        sl =sl
        follow undecided
    =visual>
        isa car
        value =cl
    ?imaginal>
        state free
    !eval! (same-lane =sl =cl)
==>
    =goal>
        isa drive
        follow car
        ;na nil
        ;fa nil
        ;na2 nil
        ;fa2 nil
        ;fkind2 nil
        ;time2 nil
    +visual-location>
        isa visual-location
        kind near
)
(p drive*follow-car2
    =goal>
        isa control
        - follow car
    ?visual-location>
        state error
    ?imaginal>
        state free
==>
    =goal>
        isa control
        follow car
        ;na nil
        ;fa nil
        ;na2 nil
        ;fa2 nil
        ;fkind2 nil
        ;time2 nil
    +visual-location>
        isa visual-location
        kind near        
)
(p drive*follow-car3
    =goal>
        isa drive
        - follow car
    ?visual-location>
        state error
    ?imaginal>
        state free
==>
    =goal>
        isa drive
        follow car
        ;safe nil
        ;na nil
        ;fa nil
        ;na2 nil
        ;fa2 nil
        ;fkind2 nil
        ;time2 nil
    +visual-location>
        isa visual-location
        kind near
)


(p drive*glance-mirror-far
    =goal>
        isa drive
        follow far
        < sl 3
    =temporal>
        isa time
        > ticks 45
==>
    =goal>
        isa drive
    +visual-location>
        isa visual-location
        kind right-mirror
    +temporal>
        isa time
        ticks clear
)

(p drive*glance-mirror-car
    =goal>
        isa drive
        follow car
        < sl 3
        fthw =fthw
        >= fthw 4
        dthw =dthw
        > dthw 0
    =temporal>
        isa time
        > ticks 45
==>
    =goal>
        isa drive
    +visual-location>
        isa visual-location
        kind right-mirror
    +temporal>
        isa time
        ticks clear
)

(p drive*loop-not-stable-far
    =goal>
        isa control
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
    =visual>
        isa far
    !eval! (is-car-not-stable =na =vna =vfa)
==>
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
)

(p drive*loop-not-stable-car
    =goal>
        isa control
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        time =time
        follow car
    =visual>
        isa car
    !eval! (is-car-not-stable =na =vna =vfa)
==>
    =goal>
        isa drive
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        time2 =time
)

(p drive*reset
    =goal>
        isa drive
        - follow undecided
    ?visual-location>
        state free
        buffer empty
        - buffer requested
    ?visual>
        state free
        buffer empty
    ;?imaginal>
        ;state free
==>
    =goal>
        na nil
        fa nil
        na2 nil
        fa2 nil
        fkind2 nil
        time2 nil
        safe nil
    ;+visual-location>
        ;isa visual-location
        ;kind near
        ;:attended new
)
(spp :u 1)

(p drive*reset2
    =goal>
        isa drive
        follow undecided
    ?visual-location>
        state free
        - buffer requested
    ?visual>
        state free
        buffer empty
==>
    =goal>
        isa drive
    +visual-location>
        isa visual-location
        kind car
)

(p drive*reset3
    =goal>
        isa control
    ?visual-location>
        state free
        buffer empty
    ?visual>
        state free
        buffer empty
    ?imaginal>
        state free
==>
    =goal>
        isa drive
    +visual-location>
        isa visual-location
        kind near
        :attended new
)


;;----------------- Lane-change -----------------

(p drive*notice-car
    =goal>
        isa drive
        follow car
    ?visual>
        state free
        buffer empty
    =visual-location>
        isa visual-location
        kind car
        :attended new
==>
    !bind! =cl (autocar-lane)
    !bind! =sl (simcar-lane)
    =goal>
        isa drive
        cl =cl
        sl =sl
        follow undecided
    +visual>
        isa move-attention
        screen-pos =visual-location
)

;----------------- NBACK general-----------------

(p notice-sign
    =goal>
        isa nback
        status notice
    =visual-location>
        isa visual-location
        kind speedsign
    ?visual>
        state free
        buffer empty
==>
    =goal>
        isa nback
        status read-nback
    +visual>
        isa move-attention
        screen-pos =visual-location
)

(spp :u 1000)

;----------------- NBACK -----------------

;nback and rehearsal are split in two parts:
;part 1 (*): build list until n speed signs have been passed
;part 2: perform n-back task

(p nback-memorise-sign*
        ;building the initial list
    =goal>
        isa nback
        num =placeholder
        < num 2
        lastSign =lastID
    =visual>
        isa speedsign
        value =slimit
    ?retrieval>
        state free
        buffer empty
==>
    !bind! =cid (get-chunk-id)
    !bind! =num (get-num-sign)
    !bind! =nr (reset-rehearsal)
    =goal>
        isa nback
        status link
        nr =nr
        num =num
        rehearsal f
        end-rehearsal f
    +imaginal>
        isa nback-state
        id =cid
        slimit =slimit
        recalled 0
    +retrieval>
        isa nback-state
        id =lastID
)

(p nback-link-chunks*
    =goal>
        isa nback
        status link
        < num 3
    =imaginal>
        isa nback-state
        id =cid
    =retrieval>
        isa nback-state
        < id =cid
        id =1back
==>
    =goal>
        isa nback
        status notice
        lastSign =cid
        rehearsal t
    =imaginal>
        isa nback-state
        1back =1back
        recalled link
)

(p nback-link-chunks
    =goal>
        isa nback
        status link
        >= num 3
    =imaginal>
        isa nback-state
        id =cid
    =retrieval>
        isa nback-state
        < id =cid
        id =1back
==>
    =goal>
        isa nback
        status notice
        lastSign =cid
        rehearsal f
    =imaginal>
        isa nback-state
        1back =1back
        recalled link
)

(p update-speed-after-sign*
    =goal>
        isa drive
    =imaginal>
        isa nback-state
        id =cid
        < id 60
        1back =1back
        slimit =slimit
        recalled link
    ?retrieval>
        state free
        buffer empty
==>
    =goal>
        isa drive
        nbackspeed =slimit
        lastSign =cid
        lookSpeedometer 0
    =imaginal>
        isa nback-state
        recalled 0
    -imaginal>
)

(p update-goal-after-sign
    =goal>
        isa drive
    =imaginal>
        isa nback-state
        id =cid
        >= id 60
        1back =1back
        slimit =slimit
        recalled link
    ?retrieval>
        state free
        buffer empty
==>
    =goal>
        isa drive
        lastSign =cid
    =imaginal>
        isa nback-state
        recalled 0
    -imaginal>
)

(p update-speed-after-recall
    =goal>
        isa drive
    =imaginal>
        isa nback-state
        id =cid
        1back =1back
        slimit =slimit
        recalled 1
    ?retrieval>
        state free
        buffer empty
==>
    =goal>
        isa drive
        nbackspeed =slimit
        lookSpeedometer 0
    =imaginal>
        isa nback-state
        id =cid
        1back =1back
        slimit =slimit
        recalled 0
    -imaginal>
)

(p nback-memorise-sign
    =goal>
        isa nback
        status read-nback
        >= num 2
        lastSign =lastID
    =visual>
        isa speedsign
        value =slimit
==>
    !bind! =cid (get-chunk-id)
    !bind! =nr (reset-rehearsal)
    !bind! =num (get-num-sign)
    =goal>
        status link
        nr =nr
        num =num
        rehearsal f
        end-rehearsal f
    +imaginal>
        isa nback-state
        id =cid
        slimit =slimit
        recalled 0
    +retrieval>
        isa nback-state
        id =lastID
)

(p nback-start-recall
    =goal>
        isa nback
        status notice
        rehearsal f
        >= num 3
        lastSign =lastID
    ?visual-location>
        - state error
        - buffer requested
        buffer empty
    ?imaginal>
        buffer empty
        state free
==>
    =goal>
        status remember0
        rehearsal t
    +retrieval>
        isa nback-state
        id =lastID
)

(p nback-remember-sign-0back
    =goal>
        isa nback
        status remember0
    =retrieval>
        isa nback-state
        1back =1back
        id =id
        - id 0
        slimit =nbackspeed
        recalled 0
    ?imaginal>
        buffer empty
        state free
==>
    =goal>
        status remember1
    +retrieval>
        isa nback-state
        id =1back
    +imaginal>
        isa nback-state
        id =id
        1back =1back
        slimit =nbackspeed
        recalled 0
)

(p nback-remember-sign-1back
    =goal>
        isa nback
        status remember1
    =retrieval>
        isa nback-state
        1back =1back
        slimit =nbackspeed
        id =id
        - id 0
        recalled 0
==>
    =goal>
        status remember2
    +retrieval>
        isa nback-state
        id =1back
    +imaginal>
        isa nback-state
        id =id
        1back =1back
        slimit =nbackspeed
        recalled 0
)

(p nback-remember-sign-2back
    =goal>
        isa nback
        status remember2
    =retrieval>
        isa nback-state
        slimit =nbackspeed
        1back =1back
        id =id
        - id 0
        recalled 0
==>
    =goal>
        status notice
        rehearsal t
    +imaginal>
        isa nback-state
        id =id
        1back =1back
        slimit =nbackspeed
        recalled 1
)

(p nback-retrieval-failure
    =goal>
        isa nback
        - status notice
        - status read-nback
    ?retrieval>
        state error
==>
    =goal>
        status notice
        rehearsal f
)

;----------------- REHEARSAL* -----------------

(p nback-rehearse-sign0*
    =goal>
        isa nback
        status rehearse0
        <= num 1
    =retrieval>
        isa nback-state
        1back =1back
        id =id
        - id 0
        slimit =nbackspeed
        recalled 0
    ?imaginal>
        state free
==>
    =goal>
        status notice
        end-rehearsal t
    +imaginal>
        isa nback-state
        id =id
        1back =1back
        slimit =nbackspeed
        recalled 0
    -imaginal>
    -retrieval>
)

(p nback-rehearse-sign1*
    =goal>
        isa nback
        status rehearse1
        <= num 2
    =retrieval>
        isa nback-state
        1back =1back
        id =id
        - id 0
        slimit =nbackspeed
        recalled 0
    ?imaginal>
        state free
==>
    =goal>
        status notice
        end-rehearsal t
    +imaginal>
        isa nback-state
        id =id
        1back =1back
        slimit =nbackspeed
        recalled 0
    -imaginal>
    -retrieval>
)

;----------------- REHEARSAL -----------------

(p nback-start-rehearsal
    =goal>
        isa nback
        status notice
        rehearsal t
        < nr 10
        >= num 1
        lastSign =lastID
    ?imaginal>
        buffer empty
        state free
==>
    !bind! =nr (get-num-rehearsal)
    =goal>
        status rehearse0
        nr =nr
        end-rehearsal f
    +retrieval>
        isa nback-state
        id =lastID
)

(p nback-rehearse-sign0
    =goal>
        isa nback
        status rehearse0
        > num 1
    =retrieval>
        isa nback-state
        1back =1back
        id =id
        - id 0
        slimit =nbackspeed
        recalled 0
    ?imaginal>
        state free
==>
    =goal>
        status rehearse1
    +retrieval>
        isa nback-state
        id =1back
    +imaginal>
        isa nback-state
        id =id
        1back =1back
        slimit =nbackspeed
        recalled 0
)

(p nback-rehearse-sign1
    =goal>
        isa nback
        status rehearse1
        > num 2
    =retrieval>
        isa nback-state
        1back =1back
        id =id
        - id 0
        slimit =nbackspeed
        recalled 0
    ?imaginal>
        state free
==>
    =goal>
        status rehearse2
    +imaginal>
        isa nback-state
        id =id
        1back =1back
        slimit =nbackspeed
        recalled 0
    +retrieval>
        isa nback-state
        id =1back
)

(p nback-rehearse-sign2
    =goal>
        isa nback
        status rehearse2
        >= num 3
    =retrieval>
        isa nback-state
        1back =1back
        id =id
        - id 0
        slimit =nbackspeed
        recalled 0
    ?imaginal>
        state free
==>
    =goal>
        status notice
    +imaginal>
        isa nback-state
        id =id
        1back =1back
        slimit =nbackspeed
        recalled 0
    -imaginal>
    -retrieval>
)

(p nback-interrupt-rehearsing-notice-sign
    =goal>
        isa nback
        - status notice 
    =visual-location>
        isa visual-location
        kind speedsign
    ?visual>
        state free
        buffer empty
==>
    =goal>
        isa nback
        status read-nback   
        rehearsal f
    +visual>
        isa move-attention
        screen-pos =visual-location
    -retrieval>
    -imaginal>
)

(p nback-resolve-rehearsal
    =goal>
        isa nback
        status notice
        rehearsal t
        end-rehearsal t
    =imaginal>
        isa nback-state
==>
    =goal>
        isa nback
        rehearsal t
        end-rehearsal f
    -imaginal>
)

(p nback-restart-rehearsal
    =goal>
        isa nback
        rehearsal t
    =retrieval>
        isa nback-state
        id 0
==>
    =goal>
        isa nback
        status notice
    -retrieval>
    -imaginal>
)

(set-similarities
    (20 20 -0.0)(20 40 -0.1)(20 60 -0.2)(20 80 -0.3)(20 100 -0.4)(20 120 -0.5)(20 140 -0.6)(20 160 -0.7)(20 180 -0.8)(20 200 -0.9)(20 220 -1.0)(20 240 -1.1)(20 260 -1.2)(20 280 -1.3)(20 300 -1.4)(20 320 -1.5)(20 340 -1.6)(20 360 -1.7)(20 380 -1.8)(20 400 -1.9)(20 420 -2.0)(20 440 -2.1)(20 460 -2.2)(20 480 -2.3)(20 500 -2.4)
    (40 20 -0.1)(40 40 -0.0)(40 60 -0.1)(40 80 -0.2)(40 100 -0.3)(40 120 -0.4)(40 140 -0.5)(40 160 -0.6)(40 180 -0.7)(40 200 -0.8)(40 220 -0.9)(40 240 -1.0)(40 260 -1.1)(40 280 -1.2)(40 300 -1.3)(40 320 -1.4)(40 340 -1.5)(40 360 -1.6)(40 380 -1.7)(40 400 -1.8)(40 420 -1.9)(40 440 -2.0)(40 460 -2.1)(40 480 -2.2)(40 500 -2.3)
    (60 20 -0.2)(60 40 -0.1)(60 60 -0.0)(60 80 -0.1)(60 100 -0.2)(60 120 -0.3)(60 140 -0.4)(60 160 -0.5)(60 180 -0.6)(60 200 -0.7)(60 220 -0.8)(60 240 -0.9)(60 260 -1.0)(60 280 -1.1)(60 300 -1.2)(60 320 -1.3)(60 340 -1.4)(60 360 -1.5)(60 380 -1.6)(60 400 -1.7)(60 420 -1.8)(60 440 -1.9)(60 460 -2.0)(60 480 -2.1)(60 500 -2.2)
    (80 20 -0.3)(80 40 -0.2)(80 60 -0.1)(80 80 -0.0)(80 100 -0.1)(80 120 -0.2)(80 140 -0.3)(80 160 -0.4)(80 180 -0.5)(80 200 -0.6)(80 220 -0.7)(80 240 -0.8)(80 260 -0.9)(80 280 -1.0)(80 300 -1.1)(80 320 -1.2)(80 340 -1.3)(80 360 -1.4)(80 380 -1.5)(80 400 -1.6)(80 420 -1.7)(80 440 -1.8)(80 460 -1.9)(80 480 -2.0)(80 500 -2.1)
    (100 20 -0.4)(100 40 -0.3)(100 60 -0.2)(100 80 -0.1)(100 100 -0.0)(100 120 -0.1)(100 140 -0.2)(100 160 -0.3)(100 180 -0.4)(100 200 -0.5)(100 220 -0.6)(100 240 -0.7)(100 260 -0.8)(100 280 -0.9)(100 300 -1.0)(100 320 -1.1)(100 340 -1.2)(100 360 -1.3)(100 380 -1.4)(100 400 -1.5)(100 420 -1.6)(100 440 -1.7)(100 460 -1.8)(100 480 -1.9)(100 500 -2.0)
    (120 20 -0.5)(120 40 -0.4)(120 60 -0.3)(120 80 -0.2)(120 100 -0.1)(120 120 -0.0)(120 140 -0.1)(120 160 -0.2)(120 180 -0.3)(120 200 -0.4)(120 220 -0.5)(120 240 -0.6)(120 260 -0.7)(120 280 -0.8)(120 300 -0.9)(120 320 -1.0)(120 340 -1.1)(120 360 -1.2)(120 380 -1.3)(120 400 -1.4)(120 420 -1.5)(120 440 -1.6)(120 460 -1.7)(120 480 -1.8)(120 500 -1.9)
    (140 20 -0.6)(140 40 -0.5)(140 60 -0.4)(140 80 -0.3)(140 100 -0.2)(140 120 -0.1)(140 140 -0.0)(140 160 -0.1)(140 180 -0.2)(140 200 -0.3)(140 220 -0.4)(140 240 -0.5)(140 260 -0.6)(140 280 -0.7)(140 300 -0.8)(140 320 -0.9)(140 340 -1.0)(140 360 -1.1)(140 380 -1.2)(140 400 -1.3)(140 420 -1.4)(140 440 -1.5)(140 460 -1.6)(140 480 -1.7)(140 500 -1.8)
    (160 20 -0.7)(160 40 -0.6)(160 60 -0.5)(160 80 -0.4)(160 100 -0.3)(160 120 -0.2)(160 140 -0.1)(160 160 -0.0)(160 180 -0.1)(160 200 -0.2)(160 220 -0.3)(160 240 -0.4)(160 260 -0.5)(160 280 -0.6)(160 300 -0.7)(160 320 -0.8)(160 340 -0.9)(160 360 -1.0)(160 380 -1.1)(160 400 -1.2)(160 420 -1.3)(160 440 -1.4)(160 460 -1.5)(160 480 -1.6)(160 500 -1.7)
    (180 20 -0.8)(180 40 -0.7)(180 60 -0.6)(180 80 -0.5)(180 100 -0.4)(180 120 -0.3)(180 140 -0.2)(180 160 -0.1)(180 180 -0.0)(180 200 -0.1)(180 220 -0.2)(180 240 -0.3)(180 260 -0.4)(180 280 -0.5)(180 300 -0.6)(180 320 -0.7)(180 340 -0.8)(180 360 -0.9)(180 380 -1.0)(180 400 -1.1)(180 420 -1.2)(180 440 -1.3)(180 460 -1.4)(180 480 -1.5)(180 500 -1.6)
    (200 20 -0.9)(200 40 -0.8)(200 60 -0.7)(200 80 -0.6)(200 100 -0.5)(200 120 -0.4)(200 140 -0.3)(200 160 -0.2)(200 180 -0.1)(200 200 -0.0)(200 220 -0.1)(200 240 -0.2)(200 260 -0.3)(200 280 -0.4)(200 300 -0.5)(200 320 -0.6)(200 340 -0.7)(200 360 -0.8)(200 380 -0.9)(200 400 -1.0)(200 420 -1.1)(200 440 -1.2)(200 460 -1.3)(200 480 -1.4)(200 500 -1.5)
    (220 20 -1.0)(220 40 -0.9)(220 60 -0.8)(220 80 -0.7)(220 100 -0.6)(220 120 -0.5)(220 140 -0.4)(220 160 -0.3)(220 180 -0.2)(220 200 -0.1)(220 220 -0.0)(220 240 -0.1)(220 260 -0.2)(220 280 -0.3)(220 300 -0.4)(220 320 -0.5)(220 340 -0.6)(220 360 -0.7)(220 380 -0.8)(220 400 -0.9)(220 420 -1.0)(220 440 -1.1)(220 460 -1.2)(220 480 -1.3)(220 500 -1.4)
    (240 20 -1.1)(240 40 -1.0)(240 60 -0.9)(240 80 -0.8)(240 100 -0.7)(240 120 -0.6)(240 140 -0.5)(240 160 -0.4)(240 180 -0.3)(240 200 -0.2)(240 220 -0.1)(240 240 -0.0)(240 260 -0.1)(240 280 -0.2)(240 300 -0.3)(240 320 -0.4)(240 340 -0.5)(240 360 -0.6)(240 380 -0.7)(240 400 -0.8)(240 420 -0.9)(240 440 -1.0)(240 460 -1.1)(240 480 -1.2)(240 500 -1.3)
    (260 20 -1.2)(260 40 -1.1)(260 60 -1.0)(260 80 -0.9)(260 100 -0.8)(260 120 -0.7)(260 140 -0.6)(260 160 -0.5)(260 180 -0.4)(260 200 -0.3)(260 220 -0.2)(260 240 -0.1)(260 260 -0.0)(260 280 -0.1)(260 300 -0.2)(260 320 -0.3)(260 340 -0.4)(260 360 -0.5)(260 380 -0.6)(260 400 -0.7)(260 420 -0.8)(260 440 -0.9)(260 460 -1.0)(260 480 -1.1)(260 500 -1.2)
    (280 20 -1.3)(280 40 -1.2)(280 60 -1.1)(280 80 -1.0)(280 100 -0.9)(280 120 -0.8)(280 140 -0.7)(280 160 -0.6)(280 180 -0.5)(280 200 -0.4)(280 220 -0.3)(280 240 -0.2)(280 260 -0.1)(280 280 -0.0)(280 300 -0.1)(280 320 -0.2)(280 340 -0.3)(280 360 -0.4)(280 380 -0.5)(280 400 -0.6)(280 420 -0.7)(280 440 -0.8)(280 460 -0.9)(280 480 -1.0)(280 500 -1.1)
    (300 20 -1.4)(300 40 -1.3)(300 60 -1.2)(300 80 -1.1)(300 100 -1.0)(300 120 -0.9)(300 140 -0.8)(300 160 -0.7)(300 180 -0.6)(300 200 -0.5)(300 220 -0.4)(300 240 -0.3)(300 260 -0.2)(300 280 -0.1)(300 300 -0.0)(300 320 -0.1)(300 340 -0.2)(300 360 -0.3)(300 380 -0.4)(300 400 -0.5)(300 420 -0.6)(300 440 -0.7)(300 460 -0.8)(300 480 -0.9)(300 500 -1.0)
    (320 20 -1.5)(320 40 -1.4)(320 60 -1.3)(320 80 -1.2)(320 100 -1.1)(320 120 -1.0)(320 140 -0.9)(320 160 -0.8)(320 180 -0.7)(320 200 -0.6)(320 220 -0.5)(320 240 -0.4)(320 260 -0.3)(320 280 -0.2)(320 300 -0.1)(320 320 -0.0)(320 340 -0.1)(320 360 -0.2)(320 380 -0.3)(320 400 -0.4)(320 420 -0.5)(320 440 -0.6)(320 460 -0.7)(320 480 -0.8)(320 500 -0.9)
    (340 20 -1.6)(340 40 -1.5)(340 60 -1.4)(340 80 -1.3)(340 100 -1.2)(340 120 -1.1)(340 140 -1.0)(340 160 -0.9)(340 180 -0.8)(340 200 -0.7)(340 220 -0.6)(340 240 -0.5)(340 260 -0.4)(340 280 -0.3)(340 300 -0.2)(340 320 -0.1)(340 340 -0.0)(340 360 -0.1)(340 380 -0.2)(340 400 -0.3)(340 420 -0.4)(340 440 -0.5)(340 460 -0.6)(340 480 -0.7)(340 500 -0.8)
    (360 20 -1.7)(360 40 -1.6)(360 60 -1.5)(360 80 -1.4)(360 100 -1.3)(360 120 -1.2)(360 140 -1.1)(360 160 -1.0)(360 180 -0.9)(360 200 -0.8)(360 220 -0.7)(360 240 -0.6)(360 260 -0.5)(360 280 -0.4)(360 300 -0.3)(360 320 -0.2)(360 340 -0.1)(360 360 -0.0)(360 380 -0.1)(360 400 -0.2)(360 420 -0.3)(360 440 -0.4)(360 460 -0.5)(360 480 -0.6)(360 500 -0.7)
    (380 20 -1.8)(380 40 -1.7)(380 60 -1.6)(380 80 -1.5)(380 100 -1.4)(380 120 -1.3)(380 140 -1.2)(380 160 -1.1)(380 180 -1.0)(380 200 -0.9)(380 220 -0.8)(380 240 -0.7)(380 260 -0.6)(380 280 -0.5)(380 300 -0.4)(380 320 -0.3)(380 340 -0.2)(380 360 -0.1)(380 380 -0.0)(380 400 -0.1)(380 420 -0.2)(380 440 -0.3)(380 460 -0.4)(380 480 -0.5)(380 500 -0.6)
    (400 20 -1.9)(400 40 -1.8)(400 60 -1.7)(400 80 -1.6)(400 100 -1.5)(400 120 -1.4)(400 140 -1.3)(400 160 -1.2)(400 180 -1.1)(400 200 -1.0)(400 220 -0.9)(400 240 -0.8)(400 260 -0.7)(400 280 -0.6)(400 300 -0.5)(400 320 -0.4)(400 340 -0.3)(400 360 -0.2)(400 380 -0.1)(400 400 -0.0)(400 420 -0.1)(400 440 -0.2)(400 460 -0.3)(400 480 -0.4)(400 500 -0.5)
    (420 20 -2.0)(420 40 -1.9)(420 60 -1.8)(420 80 -1.7)(420 100 -1.6)(420 120 -1.5)(420 140 -1.4)(420 160 -1.3)(420 180 -1.2)(420 200 -1.1)(420 220 -1.0)(420 240 -0.9)(420 260 -0.8)(420 280 -0.7)(420 300 -0.6)(420 320 -0.5)(420 340 -0.4)(420 360 -0.3)(420 380 -0.2)(420 400 -0.1)(420 420 -0.0)(420 440 -0.1)(420 460 -0.2)(420 480 -0.3)(420 500 -0.4)
    (440 20 -2.1)(440 40 -2.0)(440 60 -1.9)(440 80 -1.8)(440 100 -1.7)(440 120 -1.6)(440 140 -1.5)(440 160 -1.4)(440 180 -1.3)(440 200 -1.2)(440 220 -1.1)(440 240 -1.0)(440 260 -0.9)(440 280 -0.8)(440 300 -0.7)(440 320 -0.6)(440 340 -0.5)(440 360 -0.4)(440 380 -0.3)(440 400 -0.2)(440 420 -0.1)(440 440 -0.0)(440 460 -0.1)(440 480 -0.2)(440 500 -0.3)
    (460 20 -2.2)(460 40 -2.1)(460 60 -2.0)(460 80 -1.9)(460 100 -1.8)(460 120 -1.7)(460 140 -1.6)(460 160 -1.5)(460 180 -1.4)(460 200 -1.3)(460 220 -1.2)(460 240 -1.1)(460 260 -1.0)(460 280 -0.9)(460 300 -0.8)(460 320 -0.7)(460 340 -0.6)(460 360 -0.5)(460 380 -0.4)(460 400 -0.3)(460 420 -0.2)(460 440 -0.1)(460 460 -0.0)(460 480 -0.1)(460 500 -0.2)
    (480 20 -2.3)(480 40 -2.2)(480 60 -2.1)(480 80 -2.0)(480 100 -1.9)(480 120 -1.8)(480 140 -1.7)(480 160 -1.6)(480 180 -1.5)(480 200 -1.4)(480 220 -1.3)(480 240 -1.2)(480 260 -1.1)(480 280 -1.0)(480 300 -0.9)(480 320 -0.8)(480 340 -0.7)(480 360 -0.6)(480 380 -0.5)(480 400 -0.4)(480 420 -0.3)(480 440 -0.2)(480 460 -0.1)(480 480 -0.0)(480 500 -0.1)
    (500 20 -2.4)(500 40 -2.3)(500 60 -2.2)(500 80 -2.1)(500 100 -2.0)(500 120 -1.9)(500 140 -1.8)(500 160 -1.7)(500 180 -1.6)(500 200 -1.5)(500 220 -1.4)(500 240 -1.3)(500 260 -1.2)(500 280 -1.1)(500 300 -1.0)(500 320 -0.9)(500 340 -0.8)(500 360 -0.7)(500 380 -0.6)(500 400 -0.5)(500 420 -0.4)(500 440 -0.3)(500 460 -0.2)(500 480 -0.1)(500 500 -0.0)
    
)

(goal-focus goal1)
(goal-focus goal2)
